using System;
using System.Threading;

class Example
{
    // Создание мьютекса, создающий поток не владеет мьютексом.
    private static Mutex mut = new Mutex();
    private const int numIterations = 1;
    private const int numThreads = 3;

    static void Main()
    {
        Example ex = new Example();
        ex.StartThreads();
        Console.ReadKey();
    }

    private void StartThreads()
    {
        // создаются потоки, стремящиеся использовать ресурс, проходя через критическую     
        //секцию.
        for (int i = 0; i < numThreads; i++)
        {
            Thread newThread = new Thread(new ThreadStart(ThreadProc));
            newThread.Name = String.Format("Thread{0}", i + 1);
            newThread.Start();
        }

        // главный поток переходит к ожиданию ответа оператора, после которого он завершится, но остальные потоки («переднего плана») продолжат работу. 
    }

    private static void ThreadProc()
    {
        for (int i = 0; i < numIterations; i++)
        {
            UseResource();
        }
    }

    // этот метод изображает использование критического ресурса, которым пользоваться    
    //единомоментно может только один поток.
    private static void UseResource()
    {
        Console.WriteLine("{0} is requesting the mutex", Thread.CurrentThread.Name);
        if (mut.WaitOne(1000))//ждать не более 1000 миллисекунд
        {
            Console.WriteLine("{0} has entered the 1st protected area",
                Thread.CurrentThread.Name);

            // здесь может быть запрограммировано использование ресурса

            Thread.Sleep(5000);//моделирование использования ресурса во времени

            Console.WriteLine("{0} is leaving the 1st protected area",
                Thread.CurrentThread.Name);
            mut.WaitOne();

            Console.WriteLine("{0} has entered the 2nd protected area",
                Thread.CurrentThread.Name);            

            Thread.Sleep(5000); //моделирование использования ресурса во времени

            Console.WriteLine("{0} is leaving the 2nd protected area",
            Thread.CurrentThread.Name);

            mut.ReleaseMutex()//освобождение мьютекса
            Console.WriteLine("{0} has released the mutex",
                              Thread.CurrentThread.Name);

            mut.ReleaseMutex();
            Console.WriteLine("{0} has released the mutex",
                              Thread.CurrentThread.Name);

        }
        else
        {
            Console.WriteLine("{0} will not acquire the mutex",
                              Thread.CurrentThread.Name);
 // mut.ReleaseMutex();//мьютекс не захвачен, если его освобождать, то будет показана    
 //ошибка.
        }
    }

    ~Example()
    {
        mut.Dispose();
    }
}
